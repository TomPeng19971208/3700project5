#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
#sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
#sock.connect(my_id)

last = 0

class Server:
    def __init__(self,self_id,replica_ids, socket):
        self.id = self_id
        self.replicas = replica_ids
        self.sock = socket
        #key-value pair
        self.store = {}
        #role can be one of "1.follower, 2.candidate, 3.leader"
        self.role = 1
        self.leader_id = 'FFFF'
        #candidate timeout (1.5~3s)
        self.candidate_timeout = random.randrange(150, 300)/100
        #timeout of waiting for heartbeat from leader
        self.leader_timeout = 0.015
        #interval of sending heartbeat
        self.heartbeat_interval = 0.01
        # current term 
        self.current_term = 0
        #last action's time
        self.last_action_time = time.time()
        #whether self have voted in this term 
        self.voted = False
        self.vote_received = 1
        
    
    def getVote(self):
        if self.leader_id == 'FFFF': 
            #broadcast get_vote message to all replicas
            msg = {'src': self.id, 'dst': 'FFFF', 'leader': 'FFFF', 'type': 'get_vote', 'term': self.current_term}
            self.sock.send(json.dumps(msg))
            print '%s sending a get_vote to %s' % (msg['src'], msg['dst'])
            self.current_term += 1
        else:
            return
        
    #when broad cast, set dst to 'FFFF'
    def send_msg(self, msg):
        self.sock.send(json.dump(msg))
        
    def reset_timeouts(self):
        self.last_action_time = time.time()
        self.candidate_timeout = random.randrange(150, 300)/100
        
    
    def handle_recv(self, msg):
        msg_type = msg['type']
        if msg_type == 'get_vote':
            if not self.voted and msg['term'] <= self.current_term:
                resp = {'src': self.id, 'dst': msg['src'], 'type': 'send_vote'}
                self.send_msg(resp)
                self.voted = True
        #received hearbeat from leader
        if msg_type == 'noop' and not self.role==3:
            self.last_action_time = time.time()
        #received a vote from others
        elif msg_type == 'send_vote':
            if self.leader_id=='FFFF':
                self.vote_received += 1
                #self becomes the leader
                if(self.vote_received == 3):
                    self.leader_id = self.id
                    self.role = 3
                    self.send_msg({'src': self.id, 'dst': 'FFFF', 'leader': self.id, 'type': 'announce_leader', 'term': self.current_term, 'store': self.store})
                    
        elif msg_type == 'announce_leader':
            self.current_term = msg_type['term']
            self.store = msg['store']
            self.vote_received = 1
            self.leader_id = msg['src']
            self.reset_timeouts()
                
        
        
        
    def start(self):
        self.sock.connect(self.id)
        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]
            if self.sock in ready:
                msg_raw = sock.recv(32768)
                if len(msg_raw) == 0: continue
                msg = json.loads(msg_raw)
                self.handle_recv(msg)
        #end of receiving msgs---------
            clock = time.time()
            time_passed = clock-self.last_action_time
            #send a heartbeat if self is the leader
            if time_passed > self.heartbeat_interval and self.role==3:
		       msg = {'src': my_id, 'dst': 'FFFF', 'leader': 'FFFF', 'type': 'noop'}
		       self.send_msg(msg)
		       self.last_action_time = clock
            #re-elect if self has not received hearbeats from leader
            elif time_passed > self.leader_timeout and not self.role==3: 
                self.leader_id='FFFF'
                self.voted = False
                self.reset_timeouts()
            #become a candidate after candidate timeout
            elif time_passed > self.candidate_timeout and self.role == 2 and self.leader=='FFFF':
                self.role = 2
                self.getVote()
                self.last_action_time = clock
        
    def send(dest_id, msg):
        
        
def main():
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
    server = Server(sys.argv[1], sys.argv[2:], sock)
    server.start()

if __name__=="__main__":
    main()      















